jobs:
  build-rust-binaries:
    name: Build Rust Binary (${{ matrix.target_info.name }})
    runs-on: ubuntu-latest
    container: debian:bullseye
    permissions:
      contents: read
      actions: write
    strategy:
      matrix:
        target_info:
          - name: amd64
            rust_target: x86_64-unknown-linux-gnu
            linker_command: ""
            cross_package: ""
            architecture: ""
          - name: arm64
            rust_target: aarch64-unknown-linux-gnu
            linker_command: aarch64-linux-gnu-gcc
            cross_package: gcc-aarch64-linux-gnu libssl-dev:arm64
            architecture: arm64
          - name: armhf
            rust_target: armv7-unknown-linux-gnueabihf
            linker_command: arm-linux-gnueabihf-gcc
            cross_package: gcc-arm-linux-gnueabihf libssl-dev:armhf
            architecture: armhf

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install base dependencies
        run: |
          apt-get update -y
          apt-get install -y --no-install-recommends ca-certificates build-essential pkg-config curl

      - name: Install cross-compilation tools (C linkers/compilers)
        if: matrix.target_info.cross_package
        run: |
          dpkg --add-architecture ${{ matrix.target_info.architecture }}
          apt-get update -y
          apt-get install -y --no-install-recommends ${{ matrix.target_info.cross_package }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target_info.rust_target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Build binary
        run: |
          if [ -n "${{ matrix.target_info.linker_command }}" ]; then
            if [ "${{ matrix.target_info.rust_target }}" = "aarch64-unknown-linux-gnu" ]; then
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=${{ matrix.target_info.linker_command }}
            elif [ "${{ matrix.target_info.rust_target }}" = "armv7-unknown-linux-gnueabihf" ]; then
              export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=${{ matrix.target_info.linker_command }}
            fi
          fi
          cargo build --verbose --release --target ${{ matrix.target_info.rust_target }}

      - name: Upload compiled binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-binary-${{ matrix.target_info.name }}
          path: target/${{ matrix.target_info.rust_target }}/release/queue-calling-system
          if-no-files-found: error