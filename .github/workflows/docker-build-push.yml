name: Rust CI and Docker Build (Multi-Arch)

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  build-rust-binaries:
    name: Build Rust Binary (${{ matrix.target_info.name }})
    runs-on: ubuntu-latest
    # This container directive runs all steps in a Debian environment
    container: debian:bullseye
    permissions:
      contents: read
      actions: write
    strategy:
      matrix:
        target_info:
          - name: amd64
            rust_target: x86_64-unknown-linux-gnu
            linker_command: ""
            cross_package: ""
            architecture: ""
          - name: arm64
            rust_target: aarch64-unknown-linux-gnu
            linker_command: aarch64-linux-gnu-gcc
            cross_package: gcc-aarch64-linux-gnu
            architecture: arm64
          - name: armhf
            rust_target: armv7-unknown-linux-gnueabihf
            linker_command: arm-linux-gnueabihf-gcc
            cross_package: gcc-arm-linux-gnueabihf
            architecture: armhf

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install base dependencies
        run: |
          apt-get update -y
          apt-get install -y --no-install-recommends ca-certificates build-essential pkg-config curl gcc-multilib

      # These commands now run inside the Debian container
      - name: Install cross-compilation tools (C linkers/compilers)
        if: matrix.target_info.cross_package
        run: |
          dpkg --add-architecture ${{ matrix.target_info.architecture }}
          apt-get update -y
          apt-get install -y --no-install-recommends ${{ matrix.target_info.cross_package }}

      # The dtolnay/rust-toolchain action is compatible with Debian
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target_info.rust_target }}

      # The Swatinem/rust-cache action is also compatible
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Build binary
        run: |
          if [ -n "${{ matrix.target_info.linker_command }}" ]; then
            if [ "${{ matrix.target_info.rust_target }}" = "aarch64-unknown-linux-gnu" ]; then
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=${{ matrix.target_info.linker_command }}
            elif [ "${{ matrix.target_info.rust_target }}" = "armv7-unknown-linux-gnueabihf" ]; then
              export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=${{ matrix.target_info.linker_command }}
            fi
          fi
          cargo build --verbose --release --target ${{ matrix.target_info.rust_target }}

      - name: Upload compiled binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-binary-${{ matrix.target_info.name }}
          path: target/${{ matrix.target_info.rust_target }}/release/queue-calling-system
          if-no-files-found: error

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # Using ubuntu-latest is standard for Docker-based actions
    needs: build-rust-binaries
    permissions:
      contents: read
      packages: write
      actions: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all compiled binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Prepare binaries for Docker build context
        run: |
          mkdir -p ./staging_binaries/linux/amd64
          mkdir -p ./staging_binaries/linux/arm64
          mkdir -p ./staging_binaries/linux/arm/v7

          cp ./downloaded-artifacts/app-binary-amd64/queue-calling-system ./staging_binaries/linux/amd64/queue-calling-system
          cp ./downloaded-artifacts/app-binary-arm64/queue-calling-system ./staging_binaries/linux/arm64/queue-calling-system
          cp ./downloaded-artifacts/app-binary-armhf/queue-calling-system ./staging_binaries/linux/arm/v7/queue-calling-system

          echo "Contents of staging_binaries:"
          ls -R ./staging_binaries

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Convert repository name to lowercase for image tag
        id: repo_lc
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: ghcr.io/${{ steps.repo_lc.outputs.name }}:latest
          labels: |
            org.opencontainers.image.description=A simple queue management system with a web interface and TTS announcements.
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            GH_REPO=${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max